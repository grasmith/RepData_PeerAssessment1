library(swirl())
swirl()
d1 <-  Sys.Date()
class(d1)
unclass(d1)
d1
d2 <- as.Date("1969-01-01")
unclass(d2)
t1 <- Sys.time()
t1
class(t1)
unclass(t1)
t2 <- as.POSIXlt(Sys.time())
class(t2)
unclass(t2)
t2
unclass(t2)
str(unclass(t2))
t2$min
weekdays(d1)
months(t1)
quarters(t2)
t3 <- "October 17, 1986 08:24"
t4 <- strptime(t3, "%B %d, %Y %H:%M")
t4
class(t4)
Sys.time() > t1
Sys.time() - t1
difftime(Sys.time(), t1, units = 'days')
data(cars)
?cars
head(cars)
plot(cars)
?plot
plot(cars$speed,cars$dist)
plot(x = cars$dist, y = cars$speed)
plot(x = cars$speed, y = cars$dist)
plot(x = cars$speed, y = cars$dist, xlab="Speed")
plot(x = cars$speed, y = cars$dist, xlab="Speed", ylab="Stopping Distance")
plot(x = cars$speed, y = cars$dist, ylab="Stopping Distance")
plot(x = cars$speed, y = cars$dist, xlab="Speed", ylab="Stopping Distance")
plot(cars,main="My Plot")
plot(cars,sub="My Plot Subtitle")
play()
?par
nxt()
plot(cars,col=2)
plot(cars,xlim = c(10, 15))
plot(cars,pch = 2)
data(mtcars)
?boxplot
boxplot(mpg~cyl,data=mtcars)
hist(mtcars$mpg)
library(swirl)
swirl()
library(dplyr)
cran <- tbl_df(mydf)
rm(mydf)
rm("mydf")
print(cran)
cran
?group_by
by_package <- group_by(cran,package)
by_package
summarise(by_package.mean(size))
summarise(by_package,mean(size))
?n
?n_distinct
pack_sum <- summarize(by_package,
count = n(),
unique = n_distinct(ip_id),
countries = n_distinct(country),
avg_bytes = mean(size))
submit()
pack_sum
quantile(pack_sum$count, probs = 0.99)
top_counts <- filter(pack_sum,count>679)
top_counts
View(top_counts)
top_counts_sorted <- arrange(top_counts,count)
top_counts_sorted <- arrange(top_counts,desc(count))
View(top_counts_sorted)
quantile(pack_sum$unique, probs = 0.99)
top_unique <- filter(pack_sum,unique > 465)
View(top_unique)
top_unique_sorted <- arrange(top_unique,desc(unique))
View(top_unique_sorted)
submit()
submit()
submit()
View(result3)
submit()
submit()
submit()
submit()
submit()
submit()
library(tidyr)
students
?gather
gather(students,sex,count,-grade)
students2
res <- gather(students2,sex_class,count,-grade)
res
? separate
separate(res,sex_class,c(sex,class))
separate(res,sex_class,c("sex","class"))
submit()
students3
submit()
? spread
submit()
submit()
extract_numeric("class5")
submit()
students4
submit()
submit()
submit()
submit()
passed
failed
passed <- mutate(passed,status="passed")
failed <- mutate(failed,status="failed")
bind_rows(passed,failed)
sat
submit()
submit()
submit()
submit()
Sys.getlocale("LC_TIME")
library(lubridate)
help(package = lubridate)
this_day <- today()
this_day
month(this_day)
wday(this_day)
wday(this_day,label=TRUE)
this_moment <- now()
this_moment
second(this_moment)
my_date <- ymd("1989-05-17")
my_date
class(my_date)
ymd("1989 May 17")
mdy("March 12, 1975")
dmy(25081985)
ymd("192012")
ymd("1920-1-2")
dt1
ymd_hms(dt1)
hms("03:22:14")
dt2
ymd(dt2)
update(this_moment, hours = 8, minutes = 34, seconds = 55)
this_moment
this_moment <- update(this_moment,now())
this_moment %>% update %>% now
this_moment %>% update %>% now()
this_moment <- update(this_moment,hours = 10, minutes = 16, seconds = 0)
this_moment
nyc <- now(tzone="America/New_York")
nyc
depart <- nyc + days(2)
depart
depart <- update(depart,hours=17,minutes=34)
depart
arrive <- depart +hours(15)+minutes(50)
?with_tz
with_tz(arrive, tzone = "Asia/Hong_Kong")
arrive <- with_tz(arrive, tzone = "Asia/Hong_Kong")
arrive
last_time <- mdy("June 17, 2008",tz="Singapore")
last_time
?new_interval
how_long <- new_interval(last_time,arrive)
as.period(how_long)
stopwatch()
new <- gsub("? "," \\1",Byd eductivismI u nderstanad m odeo f explanatiown hich)
new <- gsub("? "," \\1","Byd eductivismI u nderstanad m odeo f explanatiown hich")
new
txt <- c("The", "licenses", "for", "most", "software", "are",
"designed", "to", "take", "away", "your", "freedom",
"to", "share", "and", "change", "it.",
"", "By", "contrast,", "the", "GNU", "General", "Public", "License",
"is", "intended", "to", "guarantee", "your", "freedom", "to",
"share", "and", "change", "free", "software", "--",
"to", "make", "sure", "the", "software", "is",
"free", "for", "all", "its", "users")
txt
(ot <- sub("[b-e]",".", txt))
txt[ot != gsub("[b-e]",".", txt)]#- gsub does "global" substitution
gsub("[b-e]",".", txt)
gsub("(\\w)(\\w*)", "\\U\\1\\L\\2", txt, perl=TRUE)
new <- gsub(". "," \\1","Byd eductivismI u nderstanad m odeo f explanatiown hich")
new
new <- gsub("[.] "," \\1","Byd eductivismI u nderstanad m odeo f explanatiown hich")
new
new <- gsub("(.) "," \\1","Byd eductivismI u nderstanad m odeo f explanatiown hich")
new
source('D:/D_documents/MOOC/Coursera/04 Exploratory Data Analysis/quiz2.R')
library(nlme)
library(lattice)
xyplot(weight ~ Time | Diet, BodyWeight)
head(BodyWeight)
str(BodyWeight)
print.trellis()
trellis.par.set()
par()
library(datasets)
data(airquality)
str(airquality)
qplot(Wind, Ozone, data = airquality, facets = . ~ factor(Month))
library(ggplot2)
install.packages("ggplot2")
library(ggplot2)
qplot(Wind, Ozone, data = airquality, facets = . ~ factor(Month))
airquality = transform(airquality, Month = factor(Month))
qplot(Wind, Ozone, data = airquality, facets = . ~ Month)
g <- ggplot(movies, aes(votes, rating))
print(g)
qplot(votes, rating, data = movies)
qplot(votes, rating, data = movies) + geom_smooth()
qplot(votes, rating, data = movies, panel = panel.loess)
qplot(votes, rating, data = movies) + stats_smooth("loess")
qplot(votes, rating, data = movies, smooth = "loess")
library(swirl)
install_from_swirl("Exploratory Data Analysis")
install.packages("swirl")
library(swirl)
install_from_swirl("Exploratory Data Analysis")
install.packages("crayon")
library(swirl)
rm(list=ls())
install_from_swirl("Exploratory Data Analysis")
swirl()
install_from_swirl("Exploratory Data Analysis")
swirl()
setwd("D:/D_documents/MOOC/Coursera/05 Reproducible Research/Project 1")
adjGrpSteps <- group_by(newDat,date)
fullDat <- read.csv("activity.csv",stringsAsFactors = FALSE)
tidyDat <- fullDat[!is.na(fullDat$steps),]
library(dplyr)
grpSteps <- group_by(tidyDat,date)
totals <- summarise(grpSteps,perDay=sum(steps))
hist(totals$perDay,xlab = "No of Steps", main = "Histogram of Total Steps per Day")
print(paste0("Mean of the total number of steps taken per day: ",round(mean(totals$perDay),2)))
print(paste0("Median of the total number of steps taken per day: ",round(median(totals$perDay),2)))
int <- group_by(tidyDat,interval)
intervls <- summarise(int,aveSteps=mean(steps))
plot(intervls$interval,intervls$aveSteps,type = "l",xlab = "5 min interval",
ylab = "Average steps in interval", main = "Ave steps by time of day")
highest <- intervls[intervls$aveSteps==max(intervls$aveSteps),]
print(paste0("The interval with the maximum number of steps is ",highest$interval))
print(paste0("The number of rows with missing values is ", NROW(fullDat[is.na(fullDat$steps),])))
# use the mean number of steps for that interval over all days to cover missing values
meanSteps <- function(x){intervls$aveSteps[intervls$interval==x]}
newDat <- mutate(fullDat,adjSteps = 150000)
for(i in 1:NROW(newDat)){
if(is.na(newDat$steps[i])){
newDat$adjSteps[i] <- meanSteps(newDat$interval[i])
}
else{
newDat$adjSteps[i] <- newDat$steps[i]
}
}
adjGrpSteps <- group_by(newDat,date)
dayTotals <- summarise(adjGrpSteps,daily=sum(steps))
hist(dayTotals$daily,xlab = "No of Steps", main = "Histogram of Adjusted Total Steps per Day")
print(paste0("Mean of the adjusted total number of steps taken per day: ",round(mean(dayTotals$daily),2)))
dayTotals <- summarise(adjGrpSteps,daily=sum(adjSteps))
hist(dayTotals$daily,xlab = "No of Steps", main = "Histogram of Adjusted Total Steps per Day")
print(paste0("Mean of the adjusted total number of steps taken per day: ",round(mean(dayTotals$daily),2)))
print(paste0("Median of the adjusted total number of steps taken per day: ",       round(median(dayTotals$daily),2)))
newDat2 <- mutate(newDat,dayType = weekdays(newDat$date))
newDat2 <- mutate(newDat,dayType = weekdays(as.date(newDat$date))
)
newDat2 <- mutate(newDat,dayType = weekdays(as.Date(newDat$date)))
newDat2 <- mutate(newDat,dayType = ifelse(weekdays(as.Date(newDat$date)) %in% c("Saturday","Sunday"),"weekend","weekday"))
NROW(newDat2[newDat2$dayType=="weekday",])
NROW(newDat2[newDat2$dayType=="weekend",])
